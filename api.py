"""
API pour la pr√©diction du churn avec FastAPI.
"""

from typing import List, Dict
import numpy as np
import mlflow.pyfunc
import joblib
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

# Charger le mod√®le depuis MLflow Model Registry
MODEL_NAME: str = "ChurnPredictionModel"
MODEL_VERSION: str = "1"

try:
    MODEL = mlflow.pyfunc.load_model(f"models:/{MODEL_NAME}/1")  
    print(
        f"‚úÖ Mod√®le {MODEL_NAME} (version {MODEL_VERSION}) " "charg√© depuis MLflow Model Registry"
    )
except mlflow.exceptions.MlflowException as error:
    print(f"‚ùå Erreur MLflow : {error}")
    print("üîÑ Tentative de chargement direct du mod√®le depuis models/")

    try:
        MODEL = joblib.load("models/churn_model.pkl")
        print("‚úÖ Mod√®le charg√© avec succ√®s depuis models/churn_model.pkl")
    except FileNotFoundError:
        print("‚ùå Erreur : Aucun mod√®le trouv√©.")
        MODEL = None


class ChurnInput(BaseModel):
    """Classe pour structurer les donn√©es d'entr√©e."""

    features: List[float]


@app.post("/predict")
def predict(data: ChurnInput) -> Dict[str, str]:
    """
    Prend une liste de features et retourne une pr√©diction de churn.
    """
    if MODEL is None:
        raise HTTPException(status_code=500, detail="‚ùå Mod√®le non charg√©.")

    input_data = np.array(data.features).reshape(1, -1)
    prediction = MODEL.predict(input_data)

    return {"prediction": "Churn" if prediction[0] == 1 else "No Churn"}


@app.get("/")
def health_check() -> Dict[str, str]:
    """
    Endpoint de v√©rification du statut de l'API.
    """
    return {"status": "ok"}
